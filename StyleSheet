Universidade de Brasília – UnB
Faculdade UnB Gama – FGA
Técnicas de Programação
Profº: Mauricio Serrano

Alunos: Ana Carolina Lopes da Silva		Mat: 09/0078659
		Cristiano Costa de Sousa		Mat: 10/44320
		Fabrício Soares Coelho			Mat: 11/0116534
		
		Style Sheet for the PartyPay Softwre code in PHP
		

1) Overview

	- Codes MUST follow PSR-1.
	
	- Codes MUST use tabs, equivalent to 4 spaces for indentation.
	
	- The lines MUST be 80 characters or less.
	
	- MUST be a blank line after the namespace declaration and MUST be a blank line after the 
	  block of statements to use.
	  
	- Opening keys for classes MUST be placed on the next line and lock keys MUST be placed on 
	  the line after the body of the class.
	  
	- Methods opening keys MUST be placed on the next line and lock keys MUST be placed on 
	  the line after the method body.
	  
	- Visibility MUST be declared in all the properties and methods; abstract and final MUST 
	  be declared before the visibility; static MUST be declared after the visibility.
	  
	- Control structures keywords MUST have a space after them.  Methods and functions calls 
	  NO.
	
	- Opening keys for control structures MUST be placed on the same line and lock keys MUST be 
	  placed on the line after the body of the control structure.

	- Opening parentheses for control structures MUST NOT have a space after them and closing 
	  parentheses for control structures MUST NOT have a space before.
	  
	  Example:
	  
	  ?php
	  namespace Vendor\Package;

	  use FooInterface;
	  use BarClass as Bar;
	  use OtherVendor\OtherPackage\BazClass;

	  class Foo extends Bar implements FooInterface
	  {
      	public function sampleFunction($a, $b = null)
      	{
        	if ($a === $b) {
            	bar();
        	} elseif ($a > $b) {
            	$foo->bar($arg1);
        	} else {
            	BazClass::bar($arg2, $arg3);
        	}
      	}

      	final public static function bar()
      	{
        	// method body
      	}
	  }
	  

2) Files

	- All PHP files MUST use the standard Unix LF (linefeed) termination lines.
	
	- All PHP files MUST end with a single blank line.
	
	- The closing tag ?> MUST be omitted in files containing PHP only.
	
3) Indentation

	- The indentation MUST be done using tab (equivalent to 4 spaces).
	
	
4) Lines

	- The line should have a maximum of 80 characters.
	
	- Lines SHOULD NOT be longer than 80 characters; Longer lines that should be divided
	  into multiple subsequent rows of no more than 80 characters each.
	  
	- SHOULD NOT be blank spaces at the end of lines that are not blank. Blank lines MAY be 
	 added to improve readability and display related code blocks.
	 
	- MUST NOT be more than one statement per line.
	
	
5) Keywords and True / False / Null

	- PHP Keywords MUST be in lower case.
	
	- The PHP constants true, false and null MUST be in lower case.
	
	
6) EOL Convention (End of Line)

	- End of lines MUST follow the UNIX standard, they must end with a single linefeed (LF - / n).
	

7) Declaring Namespace and Use

	- When present, MUST be a blank line after the namespace declaration.

	- When present, all statements use MUST be placed after the namespace declaration.

	- MUST be only one keyword for use statement.

	- There MUST be a blank line after the block of use.
	
	Example:
	
	<?php
	namespace Vendor\Package;

	use FooClass;
	use BarClass as Bar;
	use OtherVendor\OtherPackage\BazClass;

	// ... more PHP code ...
	

8) Classes, Properties and Methods

	- The term class refers to all classes, interfaces and traits.
	

	8.1) Extends and Implements

	- Keywords extends and implements MUST be declared on the same line as the name of the class.
	
	- The key for the class MUST be placed on its own line; the closing key MUST be put on 
	  the line after the body of the class.
	  
	  Example:
	  
	  <?php
	  namespace Vendor\Package;

	  use FooClass;
	  use BarClass as Bar;
	  use OtherVendor\OtherPackage\BazClass;

	  class ClassName extends ParentClass implements \ArrayAccess, \Countable
	  {
	  	// constants, properties and methods
	  }
	  
	  Implements lists MAY be divided into multiple lines, where each subsequent line is 
	  indented once. When doing this, the first list item MUST be placed on the next line
	  and MUST be only one interface per line.
	    
	  Example:
	  
	  <?php
	  namespace Vendor\Package;

	  use FooClass;
	  use BarClass as Bar;
	  use OtherVendor\OtherPackage\BazClass;

	  class ClassName extends ParentClass implements
	  	\ArrayAccess,
      	\Countable,
      	\Serializable
	  {
      	// constants, properties and methods
	  }
	  
	8.2) Methods
	
	- Visibilities MUST be declared in all methods.

	- Method names SHOULD NOT be prefixed with _ to indicate visibilities protected or private.

	- Method signatures SHOULD NOT be declared with a space after the name of the method. The 
	  brace MUST be placed on its own line and the closing brace MUST be placed on the line 
	  after the method body. MUST NOT be a space after the opening parenthesis and SHOULD NOT be 
	  a space before the closing parenthesis.
	  
	  A method declaration looks like the following. Note the placement of parentheses, commas, 
	  spaces and keys:
	  
	  <?php
	  namespace Vendor\Package;

	  class ClassName
	  {
	  	public function fooBarBaz($arg1, &$arg2, $arg3 = [])
        {
        	// corpo do método
        }
	  }
	  
	8.3) Arguments of Methods

	- In the list of arguments, MUST NOT be a space before each comma and MUST be a space after 
	  each comma.
	  
	- Method arguments with default values MUST be placed at the end of the argument list.

	Example:
	
	<?php
	namespace Vendor\Package;

	class ClassName
	{
    	public function foo($arg1, &$arg2, $arg3 = [])
    	{
        	// method body
    	}
	}
	
	- List of arguments MAY be divided into multiple lines, where each subsequent line is indented 
	  once. When doing this, the first list item MUST be in the following line MUST be only one 
	  argument per line.

	- When the list of arguments is split into multiple lines, the closing parenthesis and the 
	  key opening MUST be put together on its own line with a space between them.
	  
	Example:
	
	<?php
	namespace Vendor\Package;

	class ClassName
	{
    	public function aVeryLongMethodName(
        	ClassTypeHint $arg1,
        	&$arg2,
        	array $arg3 = []
    	) {
        	// corpo do método
    	}
	}
	
9) Control Structures

	The general style rules for control structures are as follows:

		- There MUST be a space after the keyword control structure

		- SHOULD NOT be a space after the opening parenthesis

		- MUST NOT be a space before the closing parenthesis
		
		- There MUST be a space between the parentheses of closing and opening key.

		- The body of the structure must be indented once
		
		- The lock key MUST be placed on the line after the body structure

	The body of each structure MUST be surrounded by keys. This standardizes look like structures 
	and reduces the possibility of introducing errors as new lines are added to the body structure.

	9.1) if, elseif, else

	- An if statement looks like the following. Note the placement of parentheses, spaces and keys; 
	  and else and elseif are in the same line as the body's closing brace of the previous 
	  structure.
	  
	  Example:
	  
	  <?php
	  if ($expr1) {
      	// corpo do if
	  } elseif ($expr2) {
      	// corpo do elseif
	  } else {
      	// corpo do else
	  }
	  
	- The keyword elseif SHOULD be used instead of else if for all keywords control look like 
	    a word.

	9.2) switch, case

	- A switch statement looks like the following. Note the placement of parentheses, spaces and 
	  keys. The case statement MUST be indented once the switch and the case keyword (or any other 
	  termination keyword) MUST be indented at the same level that the body docase. There MUST be 
	  a comment like // without break when the passage next case is intentional on a case body 
	  that is not empty.
	  
	  Example:
	  
	  <?php
	  switch ($expr) {
      case 0:
     	echo 'Primeiro case, com um break';
        break;
      case 1:
        echo 'Segundo case, passando para o próximo case';
        // without break
      case 2:
      case 3:
      case 4:
        echo 'Terceiro case, return ao invés de break';
        return;
      default:
        echo 'Default case';
        break;
	  }
	  
	9.3) while, do while

	- A while structure looks like the following. Note the placement of parentheses, spaces and keys.
	
	<? php
	while ($ expr) {
    	// Body structure
	}

	- Similarly, a structure while it looks like the following. Note the placement of parentheses, 
	  spaces and keys.
	  
	Example:
	  
	<? php
	do {
    	// Body structure
	} While ($ expr);

	9.4) for
	
	- A structure for looks like the following. Note the placement of parentheses, spaces and keys.

	<? php
	for ($ i = 0; $ i <10; $ i ++) {
    	// Body is
	}

	9.5) foreach
	
	- A foreach structure looks like the following. Note the placement of parentheses, spaces 
	  and keys.

	<? php
	foreach ($ iterable as $ key => $ value) {
    	// Body foreach
	}

	9.6) try, catch
	
	- A try catch structure looks like the following. Note the placement of parentheses, spaces 
	  and keys.

	<? php
	try {
    	// Try body
	} Catch (FirstExceptionType $ e) {
    	// Catch body
	} Catch (OtherExceptionType $ e) {
    	// Catch body
	}
	
	
* Code Standard used PSR-1, material available in: http://www.php-fig.org/psr/psr-2/pt-br/  